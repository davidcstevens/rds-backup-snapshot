#!/bin/bash

function usage() {
	echo
	echo "THESE NEED TO BE UPDATED BASED ON RESULTING CODE"
	echo
	echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
	echo "@@    @@@     @@@@    @@@     @@@  @@  @@"
	echo "@@  @  @@  @@  @@  @@@ @@  @@  @@  @@  @@"
	echo "@@    @@@  @@  @@@@  @@@@     @@@  @@  @@"
	echo "@@  @ @@@  @@  @@ @@@  @@  @@  @@  @@  @@"
	echo "@@  @@ @@     @@@@    @@@     @@@@    @@@"
	echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
	echo
	echo "   Parameters:"
	echo
	echo "	-h: print this help doc"
	echo
	echo "	-b: run backup script"
	echo
	echo "	-d: check disk space"
	echo
	echo "	-r: remove old backups"
	echo
	echo "	-g: clear log"
	echo
	echo "   Examples:"
	echo 
	echo "	To view this help message:"
	echo "		rdsbu -h"
	echo 
	echo "	To run backup process:"
	echo "		rdsbu -b"
	echo
}

function rdsbu() {
	if [[ $# == "0" ]]; then
		# listsnapshots "-l"
		echo 
		echo "Nothing to do"
		echo "Type 'rdsbu -h' for help"
		echo 
	else
		switchboard $@
	fi
}

function switchboard() {
	while getopts ":ht:lbdrg" optname
	do
		case "$optname" in
			"h")
				usage
				exit
				;;
			"t")
				setid $OPTARG
				;;
			"l" | "s" | "a")
				if [[ -z $listparam ]]; then
					listparam=$optname
				fi
				;;
			"b")
				backuplatest
				exit
				;;
			"d")
				setdefaults
				checkdiskspace -v
				exit
				;;
			"r")
				setdefaults
				removeOldBackups
				exit
				;;
			"g")
				logg -c
				exit
				;;
			"?")
				echo "Unknown option $OPTARG"
				;;
			":")
				case "$OPTARG" in
					"f")
						echo "Argument $OPTARG requires a filename"
						exit
						;;
					"t")
						echo "Argument $OPTARG requires a tag name"
						exit
						;;
					*)
						echo "Argument $OPTARG requires a value"
						;;
				esac
				;;
			*)
				# Should not occur
				echo "Nothing to do"
				;;
		esac
		# echo "OPTIND is now $OPTIND"
	done
	if [[ -z $listparam ]] && [[ -z $filepath ]] && [[ -z $destination ]]; then
		usage
		exit 1
	elif [[ $listparam ]]; then
		listsnapshots
	else 
		usage
		exit 1
	fi
}

function backuplatest() {
	checkdiskspace

	setdefaults
	setdata

	logg "Backup initiated"
	logg $(date +%F-%T)

	setlatestsnapshot
	spinupsnapshot
	waitforrestore
	logg "Snapshot spun up."
	waitfordump
	backupdb
	removesnapshot
	removeOldBackups

	logg "Backup complete "$(date +%F-%T)
	emailer -s "RDS backup successful $currentdt" -m "Backup of RDS successful $currentdt" -a ./backup.log
	logg -c
}

function setlatestsnapshot() {
	logg "Setting up latest snapshot..."
	while read line; ## gets each instance domain name
	do
		set $line ## $2 = instance tag, $4 = domain name
		dt=${3:0:10}
		pdt=$(date -d "$dt" "+%s")
		ssavedt=$(date --date @$savedt +%F)
		if [[ $pdt > $savedt ]]; then
			if [[ $4 == 'production' ]]; then
				savedt=$pdt
				snapshot=$2
			fi
		fi
	done <<< "$snapshots"
}

function spinupsnapshot() {
	logg "Spinning up snapshot ID: $snapshot..."
	rds-restore-db-instance-from-db-snapshot $backupnm -s $snapshot -c db.m1.large
	sleep 10
}

function waitforrestore() {
	setdata
	while read line; ## gets each instance domain name
	do
		set $line ## $2 = instance tag
		if [[ "$2" == "$backupnm" ]]; then
			if [[ "$8" != 'available' ]]; then ## $8 = available, creating, deleting, backing-up, modifying
				#echo "waiting..."
				sleep 30
				waitforrestore
			fi
		fi
	done <<< "$instances"
}

function waitfordump() {
	logg "Dumping database...."
	while dumpdb == false
	do
		sleep 10
	done
	logg "Dump complete."
}

function dumpdb() {
	dump=$(mysqldump -P 3306 -h $backupnm.coezvwdirre0.us-east-1.rds.amazonaws.com -u zanehra_zanehra -pJrWhopper99 zanehra_4 `cat tables.txt` > $backupnm.$currentdt.sql)
	if echo "$dump" | grep "^Got error.*"
	then
		emailer "Dump of RDS backup failed" "MySQL error message: $dump"
		return 0
	else
		return 1
	fi
}

function backupdb() {
	logg "Backing up database..."
	mysql -u zanehra_zanehra -pJrWhopper99 zanehra_4 < $backupnm.$currentdt.sql
	logg "Backup complete."
}

function removesnapshot() {
	logg "Removing snapshot instance..."
	rds-delete-db-instance $backupnm --force --skip-final-snapshot
	logg "Snapshot instance removed."
}

function listsnapshots() {
	setdefaults
	setdata
	logg "Getting snapshot details..."

	if [[ $listparam == "l" ]]; then
		listfunctions $param
	fi
}

function setdefaults() {
	#echo -n "Setting defaults..."
	snapshot=""
	today=$(date +%s)
	savedt=$(date -d "2009-01-01" "+%s")
	currentdt=$(date '+%F')
	backupnm="backup"
	mindiskspace=15
	removeoldbackupsdays=2
	#echo -e "\rDefaults set\033[K"
}

function setdata() {
	#echo -n "Setting data..."

	sdata=$(rds-describe-db-snapshots)
	# sdata=$(cat rds-describe-db-snapshots.txt) # TEST DATA - CHANGE TO PREVIOUS LINE BEFORE PUBLISHING
	snapshots=$(echo "$sdata" | grep DBSNAPSHOT)

	idata=$(rds-describe-db-instances)
	# idata=$(cat rds-describe-db-instances.txt) # TEST DATA - CHANGE TO PREVIOUS LINE BEFORE PUBLISHING
	instances=$(echo "$idata" | grep DBINSTANCE)

	#echo -e "\rData set\033[K"
}

function listfunctions() {
	case "$listparam" in
		"l")
			while read line; ## gets each instance domain name
			do
				set $line ## $2 = instance tag, $4 = domain name
				echo $line
			done <<< "$snapshots"
			;;
		*)
			echo
			;;
	esac
	echo 
}

function logg() {
	# clear log with 'logg -c'
	
	if [ ! -f ./backup.log ]; then
	    touch ./backup.log
	fi
	if [[ $1 == "-c" ]]; then
		day=$(date +%F)
		time=$(date +%H-%M-%S)
		mv ./backup.log "./backup.$day.$time.log"		
	    touch ./backup.log
	elif [[ -z "$1" ]]; then
		echo >> ./backup.log
	else 
		echo "$(date +%F-%T)  $1" >> ./backup.log
	fi
}

function emailer() {

	#	EXAMPLES
	#	emailer "test subject" "test message"
	#	emailer -m "test message" -s "test subject" -a ~/attachment.txt
		
	to="david.stevens@zanebenefits.com"

	if [[ $# == 0 ]]; then
		echo "sendmail() requires at least one argument (default: message text)"
		exit
	elif [[ $# == 2 ]]; then
		subject="$1"
		message="$2"
	else
		subject="RDS backup server message"
		while true; do
		    case $1 in
				-m)
					shift
					message="$1"
					shift
					;;
				-s)
					shift
					subject="$1"
					shift
					;;
				-a)
					shift
					attachment="$1"
					shift
					;;
				-*) 
					echo "$0: Unrecognized option $1" >&2
					exit 2
					;;
				*) 
					break ;;
		    esac
		done
	fi
	if [ -n "$attachment" ]; then
		echo "$message" | mail -s "$subject" -a "$attachment" "$to"
	else 
		echo "$message" | mail -s "$subject" "$to"
	fi
}

function checkdiskspace() {
	if [[ $1 == "-v" ]]; then
		verbose=true
	fi

	while read line;
	do
		set $line
		if [[ "$5" == "/" ]]; then
			space=${3%.*}
			space=${space%[A-Z]*}
		elif [[ "$6" == "/" ]]; then
			space=${4%.*}
			space=${space%[A-Z]*}
		fi
	done < <(df -h ~)
	if [ -n "$verbose" ]; then
		echo "$space GB disk space available. Minimum disk space required is $mindiskspace GB"
	elif [[ $space -lt $mindiskspace ]]; then
		echo "Low disk space: $space GB available.  The system requires a minimum of $mindiskspace GB. Consider running 'rdsbu -r' to remove old backup files."
		logg "Low disk space: $space GB available. Backup failed :("
		# emailer "Backup of RDS failed - low disk space" "$(printf '%s\n' "These is only around $space GB available to create backups." "The system requires a minimum of $mindiskspace GB.")"
		emailer "Backup of RDS failed - low disk space" "These is only around $space GB available to create backups. The system requires a minimum of $mindiskspace GB. Consider running 'rdsbu -r' to remove old backup files."
		exit
	fi
}

function removeOldBackups() {
	((cutoff = $today - (86400 * $removeoldbackupsdays) )) ## 86400 = 1 day
	find . -maxdepth 1 -regex '^\./backup.*sql' | while read fileName  #Or however you get all the file names
	do
		fileDate=$(echo $fileName | sed 's/.*\([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\).*/\1/')
		fileDateInSeconds=$(date +"%s" --date="$fileDate")
		if [[ $fileDateInSeconds -lt $cutoff ]]
		then
			rm "$fileName"
		fi
	done
}

rdsbu $@